#BlueJ class context
comment0.target=Campo
comment0.text=\n\ Representa\ una\ malla\ rectangular\ de\ posiciones\ de\ campo.\n\ Cada\ posici\u00F3n\ puede\ contener\ s\u00F3lo\ un\ animal.\n\ \n\ @author\ David\ J.\ Barnes\ and\ Michael\ Kolling\n\ @author\ Traducci\u00F3n\:\ Maximiliano\ A.\ Eschoyez\n\ @version\ 2006.03.30\n
comment1.params=largo\ ancho
comment1.target=Campo(int,\ int)
comment1.text=\n\ Representa\ un\ campo\ de\ las\ dimensiones\ dadas.\n\ @param\ largo\ El\ largo\ del\ campo.\n\ @param\ ancho\ El\ ancho\ del\ campo.\n
comment10.params=
comment10.target=int\ getAncho()
comment10.text=\n\ Devuelve\ el\ ancho\ del\ campo.\n\ @return\ El\ ancho\ del\ campo.\n
comment2.params=
comment2.target=void\ limpiar()
comment2.text=\n\ Limpiar\ el\ campo.\n
comment3.params=animal
comment3.target=void\ ubicar(Animal)
comment3.text=\n\ Coloca\ un\ animal\ en\ una\ posici\u00F3n\ dada.\n\ Si\ ya\ existe\ un\ animal\ en\ esa\ posici\u00F3n,\ se\ perder\u00E1.\n\ @param\ animal\ El\ animal\ a\ ubicar.\n
comment4.params=ubicacion
comment4.target=Animal\ getAnimalEn(Ubicacion)
comment4.text=\n\ Devuelve\ el\ animal\ ubicado\ en\ la\ posicion\ dada,\ si\ hay\ uno.\n\ @param\ posicion\ Ubicacion\ dentro\ del\ campo.\n\ @return\ El\ animal\ ubicado\ en\ la\ posicion,\ o\ null\ si\ no\ hay\ uno.\n
comment5.params=fila\ columna
comment5.target=Animal\ getAnimalEn(int,\ int)
comment5.text=\n\ Devuelve\ el\ animal\ ubicado\ en\ la\ posicion\ dada,\ si\ hay\ uno.\n\ @param\ fila\ La\ fila\ deseada.\n\ @param\ columna\ La\ columna\ deseada.\n\ @return\ El\ animal\ ubicado\ en\ la\ posicion,\ o\ null\ si\ no\ hay\ uno.\n
comment6.params=ubicacion
comment6.target=Ubicacion\ direccionAdyacentePorAzar(Ubicacion)
comment6.text=\n\ Genera\ aleatoriamente\ una\ posicion\ adyacente\ a\ la\ posicion\n\ dada,\ o\ la\ misma\ posicion.\n\ La\ posicion\ devuelta\ debera\ estar\ dentro\ de\ los\ limites\n\ del\ campo.\n\ @param\ ubicacion\ La\ posicion\ desde\ la\ cual\ se\ genera\ una\ adyacencia.\n\ @return\ Una\ posicion\ valida\ dentro\ de\ la\ grilla\ del\ area.\ Este\ debe\n\ \ \ \ \ \ \ \ \ ser\ del\ mismo\ tipo\ de\ objecto\ que\ el\ parametro\ de\ la\ posicion.\n
comment7.params=ubicacion
comment7.target=Ubicacion\ direccionAdyacenteLibre(Ubicacion)
comment7.text=\n\ Intenta\ encontrar\ una\ posicion\ libre\ adyancente\ a\ la\ posicion\n\ actual.\ Si\ no\ existe,\ devuelve\ la\ posicion\ actual\ si\ esta\ libre.\n\ Si\ esta\ ocupada,\ devuelve\ null.\n\ La\ posicion\ devuelta\ debera\ estar\ entre\ los\ limites\ validos\ del\n\ campo.\n\ @param\ posicion\ La\ posicion\ para\ generar\ una\ adyacencia.\n\ @return\ Una\ posicion\ valida\ dentro\ del\ area\ de\ la\ malla.\ Este\ puede\n\ \ \ \ \ \ \ \ \ ser\ el\ mismo\ objeto\ como\ el\ parametro\ de\ la\ posicion\ o\ null\n\ \ \ \ \ \ \ \ \ si\ todas\ las\ posiciones\ alrededor\ estan\ ocupadas.\n
comment8.params=ubicacion
comment8.target=java.util.Iterator\ direccionesAdyacentes(Ubicacion)
comment8.text=\n\ Genera\ un\ iterador\ sobre\ una\ lista\ mezclada\ ("shuffled")\ de\n\ posiciones\ adyacentes\ a\ la\ dada.\ Esta\ lista\ no\ contiene\ a\ la\n\ posicion\ dada.\ Todas\ las\ posiciones\ estan\ dentro\ de\ la\ malla.\n\ @param\ posicion\ La\ posicion\ para\ la\ que\ se\ generan\ las\ adyacencias.\n\ @return\ Un\ iterador\ sobre\ las\ posiciones\ adyacentes\ a\ la\ dada.\n
comment9.params=
comment9.target=int\ getLargo()
comment9.text=\n\ Devuelve\ el\ largo\ del\ campo.\n\ @return\ El\ largo\ del\ campo.\n
numComments=11
