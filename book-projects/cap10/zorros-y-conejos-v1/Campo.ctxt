#BlueJ class context
comment0.params=largo\ ancho
comment0.target=Campo(int,\ int)
comment0.text=\nRepresenta\ un\ campo\ de\ las\ dimensiones\ dadas.\n@param\ largo\ El\ largo\ del\ campo.\n@param\ ancho\ El\ ancho\ del\ campo.\n\n
comment1.target=void\ limpiar()
comment1.text=\nLimpiar\ el\ campo.\n\n
comment10.target=int\ getAncho()
comment10.text=\nDevuelve\ el\ ancho\ del\ campo.\n@return\ El\ ancho\ del\ campo.\n\n
comment2.params=animal\ fila\ columna
comment2.target=void\ ubicar(Object,\ int,\ int)
comment2.text=\nColoca\ un\ animal\ en\ una\ posici\u00C3\u00B3n\ dada.\nSi\ ya\ existe\ un\ animal\ en\ esa\ posici\u00C3\u00B3n,\ se\ perder\u00C3\u00A1.\n@param\ animal\ El\ animal\ a\ ubicar.\n@param\ fila\ Coordenada\ de\ la\ fila\ de\ la\ posici\u00C3\u00B3n.\n@param\ columna\ Coordenada\ de\ la\ columna\ de\ la\ posici\u00C3\u00B3n.\n\n
comment3.params=animal\ posicion
comment3.target=void\ ubicar(Object,\ Ubicacion)
comment3.text=\nColoca\ un\ animal\ en\ una\ posici\u00C3\u00B3n\ dada.\nSi\ ya\ existe\ un\ animal\ en\ esa\ posici\u00C3\u00B3n,\ se\ perder\u00C3\u00A1.\n@param\ animal\ El\ animal\ a\ ubicar.\n@param\ posicion\ Donde\ ubicar\ el\ animal.\n\n
comment4.params=posicion
comment4.target=Object\ getObjectoEn(Ubicacion)
comment4.text=\nDevuelve\ el\ animal\ ubicado\ en\ la\ posicion\ dada,\ si\ hay\ uno.\n@param\ posicion\ Posicion\ dentro\ del\ campo.\n@return\ El\ animal\ ubicado\ en\ la\ posicion,\ o\ null\ si\ no\ hay\ uno.\n\n
comment5.params=fila\ columna
comment5.target=Object\ getObjectoEn(int,\ int)
comment5.text=\nDevuelve\ el\ animal\ ubicado\ en\ la\ posicion\ dada,\ si\ hay\ uno.\n@param\ fila\ La\ fila\ deseada.\n@param\ columna\ La\ columna\ deseada.\n@return\ El\ animal\ ubicado\ en\ la\ posicion,\ o\ null\ si\ no\ hay\ uno.\n\n
comment6.params=posicion
comment6.target=Ubicacion\ direccionAdyacentePorAzar(Ubicacion)
comment6.text=\nGenera\ aleatoriamente\ una\ posicion\ adyacente\ a\ la\ posicion\ndada,\ o\ la\ misma\ posicion.\nLa\ posicion\ devuelta\ debera\ estar\ dentro\ de\ los\ limites\ndel\ campo.\n@param\ posicion\ La\ posicion\ desde\ la\ cual\ se\ genera\ una\ adyacencia.\n@return\ Una\ posicion\ valida\ dentro\ de\ la\ grilla\ del\ area.\ Este\ debe\nser\ del\ mismo\ tipo\ de\ objecto\ que\ el\ parametro\ de\ la\ posicion.\n\n
comment7.params=posicion
comment7.target=Ubicacion\ direccionAdyacenteLibre(Ubicacion)
comment7.text=\nIntenta\ encontrar\ una\ posicion\ libre\ adyancente\ a\ la\ posicion\nactual.\ Si\ no\ existe,\ devuelve\ la\ posicion\ actual\ si\ esta\ libre.\nSi\ esta\ ocupada,\ devuelve\ null.\nLa\ posicion\ devuelta\ debera\ estar\ entre\ los\ limites\ validos\ del\ncampo.\n@param\ posicion\ La\ posicion\ para\ generar\ una\ adyacencia.\n@return\ Una\ posicion\ valida\ dentro\ del\ area\ de\ la\ malla.\ Este\ puede\nser\ el\ mismo\ objeto\ como\ el\ parametro\ de\ la\ posicion\ o\ null\nsi\ todas\ las\ posiciones\ alrededor\ estan\ ocupadas.\n\n
comment8.params=posicion
comment8.target=Iterator<Ubicacion>\ direccionesAdyacentes(Ubicacion)
comment8.text=\nGenera\ un\ iterador\ sobre\ una\ lista\ mezclada\ ("shuffled")\ de\nposiciones\ adyacentes\ a\ la\ dada.\ Esta\ lista\ no\ contiene\ a\ la\nposicion\ dada.\ Todas\ las\ posiciones\ estan\ dentro\ de\ la\ malla.\n@param\ posicion\ La\ posicion\ para\ la\ que\ se\ generan\ las\ adyacencias.\n@return\ Un\ iterador\ sobre\ las\ posiciones\ adyacentes\ a\ la\ dada.\n\n
comment9.target=int\ getLargo()
comment9.text=\nDevuelve\ el\ largo\ del\ campo.\n@return\ El\ largo\ del\ campo.\n\n
numComments=11
